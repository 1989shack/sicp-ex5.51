(%ex "2.63")

; section 2.3.3, page 156

(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))

; section 2.3.3, page 157

(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (entry set)) true)
        ((< x (entry set))
         (element-of-set? x (left-branch set)))
        ((> x (entry set))
         (element-of-set? x (right-branch set)))))

(define (adjoin-set x set)
  (cond ((null? set) (make-tree x '() '()))
        ((= x (entry set)) set)
        ((< x (entry set))
         (make-tree (entry set)
                    (adjoin-set x (left-branch set))
                    (right-branch set)))
        ((> x (entry set))
         (make-tree (entry set)
                    (left-branch set)
                    (adjoin-set x (right-branch set))))))

(define a (adjoin-set 6 '()))
(define b (adjoin-set 7 a))
(define c (adjoin-set 4 b))
(define d (adjoin-set 8 c))
(define e (adjoin-set 5 d))
a
b
c
d
e