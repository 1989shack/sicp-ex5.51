(%ex "2.35")

; exercise 2.35, page 120

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (count-leaves t)
  (accumulate
   +
   0
   (map
    (lambda (item)
      (if (pair? item) (count-leaves item) 1))
    t)))

(let
    ((tree (list (list 1 2) (list 1 2 3) 1)))
  (display "tree: ")(display tree)(newline)
  (display "leaf count: ")(display (count-leaves tree)))
