(%ex "2.56")

; exercise 2.56, page 150

(define (deriv-takes-makes exp var make-sum make-product)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv-takes-makes (addend exp) var make-sum make-product)
                   (deriv-takes-makes (augend exp) var make-sum make-product)))
        ((product? exp)
         (make-sum
          (make-product (multiplier exp)
                        (deriv-takes-makes (multiplicand exp) var make-sum make-product))
          (make-product (deriv-takes-makes (multiplier exp) var make-sum make-product)
                        (multiplicand exp))))
        (else
         (error "unknown expression type -- DERIV" exp))))

(define (variable? exp) (symbol? exp))

(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))

(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))
(define (make-sum-simple a1 a2) (list '+ a1 a2))
(define (addend s) (cadr s))
(define (augend s) (caddr s))

(define (product? x)
  (and (pair? x) (eq? (car x) '*)))
(define (make-product-simple m1 m2) (list '* m1 m2))
(define (multiplier p) (cadr p))
(define (multiplicand p) (caddr p))

(define (deriv-simple exp var) (deriv-takes-makes exp
                                                  var
                                                  make-sum-simple
                                                  make-product-simple))
(display "Examples from text - simplifying makes...")(newline)
(deriv-simple '(+ x 3) 'x)
(deriv-simple '(* x y) 'x)
(deriv-simple '(* (* x y) (+ x 3)) 'x)

(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (make-sum-simple a1 a2))))

(define (=number? exp num)
  (and (number? exp) (= exp num)))

(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (make-product-simple m1 m2))))

(define (deriv exp var) (deriv-takes-makes exp var make-sum make-product))

(display "Examples from text - simplifying makes...")(newline)
(deriv '(+ x 3) 'x)
(deriv '(* x y) 'x)
(deriv '(* (* x y) (+ x 3)) 'x)

;; And the actual question...
(define (exponent? x)
  (and (pair? x) (eq? (car x) '**)))

(define (base exp)
  (cadr exp))

(define (exponent exp)
  (caddr exp))

(define (make-exponent base exponent)
  (cond ((=number? exponent 0) 1)
        ((=number? exponent 1) base)
        (else (list '** base exponent))))

(define (deriv-with-exp exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv-with-exp (addend exp) var)
                   (deriv-with-exp (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product (multiplier exp)
                        (deriv-with-exp (multiplicand exp) var))
          (make-product (deriv-with-exp (multiplier exp) var)
                        (multiplicand exp))))
        ((exponent? exp)
         (make-product
          (make-product (exponent exp)
                        (make-exponent (base exp) (make-sum (exponent exp) '-1)))
          (deriv-with-exp (base exp) var)))
        (else
         (error "unknown expression type -- DERIV" exp))))

(display "Some exponentiation...")(newline)
(deriv-with-exp '(** x 3) 'x)
(deriv-with-exp '(** x 2) 'x)
(deriv-with-exp '(** x 1) 'x)
(deriv-with-exp '(+ (* 7 (** x 4)) (* 5 (** x 2))) 'x)
(deriv-with-exp '(** (+ x x) 2) 'x)
