(%ex "2.60")

; exercise 2.60, page 153

(define (element-of-set? x set)
  (if (null? set)
      false
      (if (equal? x (car set))
          true
          (element-of-set? x (cdr set)))))

; duplicate ignoring adjoin
(define (adjoin-set-dup x set2)
  (cons x set2))

; duplicate ignoring union
(define (union-set-dup set1 set2)
  (append set1 set2))

; regular intersection
(define (intersection-set set1 set2)
  (if (or (null? set1) (null? set2))
      '()
      (if (element-of-set? (car set2) set1)
          (cons (car set2) (intersection-set set1 (cdr set2)))
          (intersection-set set1 (cdr set2)))))

(display "intersection-set:")(newline)
(intersection-set '(2 2 3 3) '(2 2))

(display "adjoin-set-dup:")(newline)
(adjoin-set-dup 3 '(3))

(display "union-set-dup:")(newline)
(union-set-dup '(1 2 3) '(4 5 6))
(union-set-dup '(1 2 3) '(1 2 3))
(union-set-dup '(1 2 3) '(2 3 4))
