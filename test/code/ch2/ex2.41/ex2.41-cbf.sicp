(%ex "2.41")

; exercise 2.41, page 124

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (enumerate-range start end-ex)
  (if (< start end-ex)
      (cons start (enumerate-range (+ start 1) end-ex))
      nil))

(define (flatmap proc seq)
  (accumulate append nil (map proc seq)))

(define (unique-pairs start end)
  (flatmap
   (lambda (second)
     (map (lambda (first)
            (list first second))
          (enumerate-range start second)))
   (enumerate-range start (+ end 1))))

(define (unique-triples start end)
  (flatmap
   (lambda (right-pair)
     (map (lambda (first)
            (cons first right-pair))
          (enumerate-range start (car right-pair))))
   (unique-pairs start end)))

(let ((start 1)
      (end 5))
  (display "start: ")(display start)(newline)
  (display "end:   ")(display end)(newline)
  (display "unique-triples: ")
  (display (unique-triples start end)))
