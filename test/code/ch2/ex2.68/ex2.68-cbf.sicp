(%ex "2.68")

; exercise 2.68, page 167

(define (make-leaf symbol weight)
  (list 'leaf symbol weight))
(define (leaf? object)
  (eq? (car object) 'leaf))
(define (symbol-leaf x) (cadr x))
(define (weight-leaf x) (caddr x))

(define (make-code-tree left right)
  (list left
        right
        (append (symbols left) (symbols right))
        (+ (weight left) (weight right))))

(define (left-branch tree) (car tree))

(define (right-branch tree) (cadr tree))
(define (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree))
      (caddr tree)))
(define (weight tree)
  (if (leaf? tree)
      (weight-leaf tree)
      (cadddr tree)))

(define sample-tree
  (make-code-tree (make-leaf 'A 4)
                  (make-code-tree
                   (make-leaf 'B 2)
                   (make-code-tree (make-leaf 'D 1)
                                   (make-leaf 'C 1)))))

(define (encode message tree)
  (if (null? message)
      '()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree))))

(define (contains tree symbol)
  (define (list-contains list)
    (cond ((null? list) false)
          ((equal? symbol (car list)) true)
          (else (list-contains (cdr list)))))
  (if (leaf? tree)
      (equal? symbol (symbol-leaf tree))
      (list-contains (caddr tree))))

(define (encode-symbol symbol tree)
  (define (encode-symbol-1 tree bits)
    (if (leaf? tree)
        (reverse bits)
        (cond  ((contains (left-branch tree) symbol)
                (encode-symbol-1 (left-branch tree) (cons '0 bits)))
               ((contains (right-branch tree) symbol)
                (encode-symbol-1 (right-branch tree) (cons '1 bits)))
               (else
                (error "bad symbol -- ENCODE SYMBOL" symbol)))))
  (encode-symbol-1 tree '()))

(encode '(A D A B B C A) sample-tree)
