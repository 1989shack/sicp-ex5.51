(%ex "2.58")

; exercise 2.58, page 151

(define (redundent-parens? exp)
  (if (and (pair? exp) (= 1 (length exp)))
      true
      false))
(define (redundent-parens-contents exp)
  (car exp))

(define (deriv-takes-makes exp var
                           sum? addend augend make-sum
                           product? multiplicand multiplier make-product)

  ; Convenience function for recursing back into this function.
  (define (recur exp)
    (deriv-takes-makes exp var
                       sum? addend augend make-sum
                       product? multiplicand multiplier make-product))

  (cond ((redundent-parens? exp)
         (recur (redundent-parens-contents exp)))
        ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (recur (addend exp))
                   (recur (augend exp))))
        ((product? exp)
         (make-sum
          (make-product (multiplier exp)
                        (recur (multiplicand exp)))
          (make-product (recur (multiplier exp))
                        (multiplicand exp))))
        (else
         (error "unknown expression type -- DERIV" exp))))


(define (variable? exp) (symbol? exp))

(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))

(define (=number? exp num)
  (and (number? exp) (= exp num)))

(define (deriv-prefix exp var)
  (define (sum? x)
    (and (pair? x) (eq? (car x) '+)))
  (define (make-sum-simple a1 a2) (list '+ a1 a2))
  (define (addend s) (cadr s))
  (define (augend s) (caddr s))
  (define (make-sum a1 a2)
    (cond ((=number? a1 0) a2)
          ((=number? a2 0) a1)
          ((and (number? a1) (number? a2)) (+ a1 a2))
          (else (make-sum-simple a1 a2))))


  (define (product? x)
    (and (pair? x) (eq? (car x) '*)))
  (define (make-product-simple m1 m2) (list '* m1 m2))
  (define (multiplier p) (cadr p))
  (define (multiplicand p) (caddr p))
  (define (make-product m1 m2)
    (cond ((or (=number? m1 0) (=number? m2 0)) 0)
          ((=number? m1 1) m2)
          ((=number? m2 1) m1)
          ((and (number? m1) (number? m2)) (* m1 m2))
          (else (make-product-simple m1 m2))))

  (deriv-takes-makes exp var
                     sum? addend augend make-sum
                     product? multiplicand multiplier make-product))


(display "'Simplifying' example from text using prefix notation ...")(newline)
(deriv-prefix '(+ x 3) 'x)
(deriv-prefix '(* x y) 'x)
(deriv-prefix '(* (* x y) (+ x 3)) 'x)
(deriv-prefix '(+ x (* 3 (+ x (+ y 2)))) 'x)


; define deriv using infix operators:
(define (deriv-infix exp var)
  (define (sum? x)
    (and (pair? x) (eq? (cadr x) '+)))
  (define (make-sum-simple a1 a2) (list a1 '+ a2))
  (define (addend s) (car s))
  (define (augend s) (caddr s))
  (define (make-sum a1 a2)
    (cond ((=number? a1 0) a2)
          ((=number? a2 0) a1)
          ((and (number? a1) (number? a2)) (+ a1 a2))
          (else (make-sum-simple a1 a2))))


  (define (product? x)
    (and (pair? x) (eq? (cadr x) '*)))
  (define (make-product-simple m1 m2) (list m1 '* m2))
  (define (multiplier p) (car p))
  (define (multiplicand p) (caddr p))
  (define (make-product m1 m2)
    (cond ((or (=number? m1 0) (=number? m2 0)) 0)
          ((=number? m1 1) m2)
          ((=number? m2 1) m1)
          ((and (number? m1) (number? m2)) (* m1 m2))
          (else (make-product-simple m1 m2))))

;  ; check for redundant parens
;  (if (and (pair? exp) (= (length exp) 1))
;      (deriv-infix (car exp))
;
      (deriv-takes-makes exp var
                         sum? addend augend make-sum
                         product? multiplicand multiplier make-product))

(display "... and using infix notation ...")(newline)
(deriv-infix '(x + 3) 'x)
(deriv-infix '(x * y) 'x)
(deriv-infix '((x * y) * (x + 3)) 'x)
(deriv-infix '(x + (3 * (x + (y + 2)))) 'x)


(define (add-parens exp)
  (define (wrap op exp)
    (define (wrap-all exp)
      (if (or (not (pair? exp)) (< (length exp) 3))
          exp
          (cond ((not (eq? (cadr exp) op))
                 ; this can create 'redundent' paranthesis/lists
                 (cons (car exp) (cons (cadr exp) (wrap-all (cddr exp)))))
                (else
                 (wrap-all (wrap op (cons
                                     (list (car exp) op (caddr exp))
                                     (cdddr exp))))))))
    (if (< (length exp) 5)
        exp
        (wrap-all exp)))

  (define (wrap-mult exp)
    (wrap '* exp))
  (define (wrap-add exp)
    (wrap '+ exp))

  (cond ((pair? exp)
         (map add-parens (wrap-add (wrap-mult exp))))
        (else exp)))

(display "... add parens ...")(newline)
(add-parens '(x + 3 * (x + y + 2)))

(define (deriv-infix-without-parans exp var)
    (deriv-infix (add-parens exp) var))

(display "... and using infix notation without parents...")(newline)
(deriv-infix-without-parans '(x + 3) 'x)
(deriv-infix-without-parans '(x * y) 'x)
(deriv-infix-without-parans '((x * y) * (x + 3)) 'x)
(deriv-infix-without-parans '(x + (3 * (x + (y + 2)))) 'x)
(deriv-infix-without-parans '(x + (3 * (((x + y) + 2)))) 'x)
(deriv-infix-without-parans '(x + 3 * (x + y + 2)) 'x)
