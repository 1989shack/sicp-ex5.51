(%ex "2.39")

; exercise 2.39, page 122

(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define fold-right accumulate)

(define (fold-left op initial sequence)
  (define (iter result rest)
    (if (null? rest)
        result
        (iter (op result (car rest))
              (cdr rest))))
  (iter initial sequence))

(define (reverse-r sequence)
  (fold-right (lambda (x y)
                (append y (list x)))
              nil sequence))

(define (reverse-l sequence)
  (fold-left (lambda (x y)
               (cons y x))
             nil sequence))

(let ((items (list 1 4 9 16 25)))
  (display "items:              ")(display items)(newline)
  (display "reverse left fold:  ")(display (reverse-l items))(newline)
  (display "reverse right fold: ")(display (reverse-r items)))
