(%ex "2.33")

; exercise 2.33, page 119


(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (map p sequence)
  (accumulate (lambda (x y) (cons (p x) y)) nil sequence))

 (define (append seq1 seq2)
   (accumulate cons seq2 seq1))

 (define (length sequence)
   (accumulate (lambda (item length) (+ 1 length)) 0 sequence))

(let ((items (list 1 2 3 4))
      (items2 (list 5 6 7 8))
      (square (lambda (n) (* n n))))
  (display "items:      ")(display items)(newline)
  (display "map square: ")(display (map square items))(newline)
  (display "append:     ")(display (append items items2))(newline)
  (display "length:     ")(display (length items)))
