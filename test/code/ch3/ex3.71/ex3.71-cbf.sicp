(%ex "3.71")

; exercise 3.71, p342

(define (merge-weighted weight s1 s2)
  (cond ((stream-null? s1) s2)
        ((stream-null? s2) s1)
        (else
         (let ((s1car (stream-car s1))
               (s2car (stream-car s2)))
           (let ((ws1car (weight s1car))
                 (ws2car (weight s2car)))
             (cond ((<= ws1car ws2car)
                    (cons-stream s1car
                                 (merge-weighted weight (stream-cdr s1) s2)))
                   ((> ws1car ws2car)
                    (cons-stream s2car
                                 (merge-weighted weight s1 (stream-cdr s2))))
                   (else
                    (cons-stream s1car
                                 (merge-weighted weight (stream-cdr s1)
                                                 (stream-cdr s2))))))))))
(define (pairs-weighted weight s t)
  (cons-stream
   (list (stream-car s) (stream-car t))
   (merge-weighted weight
       (stream-map (lambda (x) (list (stream-car s) x))
                   (stream-cdr t))
       (pairs-weighted weight (stream-cdr s) (stream-cdr t)))))

;; Ramanujan

(define (rama-weight pair)
    (let ((i (car pair))
        (j (cadr pair)))
    (+ (* i i i)
       (* j j j))))

(define weighted-pairs (pairs-weighted rama-weight integers integers))

(define (find-consec s)
  (define (iter s prev)
    (if (= (rama-weight (stream-car s)) (rama-weight prev))
        (cons-stream
         (list (rama-weight prev) prev (stream-car s))
         (iter (stream-cdr s) (list -1 -1)))
        (iter (stream-cdr s) (stream-car s))))
  (iter s (list -1 -1)))

(define rama-nums (find-consec weighted-pairs))

(display-line "Ramanujan numbers:")
(display-stream (take rama-nums 6))
