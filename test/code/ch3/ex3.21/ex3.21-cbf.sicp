(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (set-front-ptr! queue item) (set-car! queue item))
(define (set-rear-ptr! queue item) (set-cdr! queue item))

(define (empty-queue? queue) (null? (front-ptr queue)))
(define (make-queue) (cons '() '()))
(define (front-queue queue)
  (if (empty-queue? queue)
      (error "FRONT called with an empty queue" queue)
      (car (front-ptr queue))))
(define (insert-queue! queue item)
  (let ((new-pair (cons item '())))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else
           (set-cdr! (rear-ptr queue) new-pair)
           (set-rear-ptr! queue new-pair)
           queue))))
(define (delete-queue! queue)
  (cond ((empty-queue? queue)
         (error "DELETE! called with an empty queue" queue))
        (else
         (set-front-ptr! queue (cdr (front-ptr queue)))
         queue)))

(define (simple-print-queue queue)
  (display queue)
  (newline))

(display "Ben's experience with a simple print:
")
(define q2 (make-queue))
(simple-print-queue (insert-queue! q2 'a))
(simple-print-queue (insert-queue! q2 'b))
(simple-print-queue (insert-queue! q2 'c))
(simple-print-queue (delete-queue! q2))
(simple-print-queue (delete-queue! q2))
(simple-print-queue (delete-queue! q2))


(define (pretty-print-queue queue)
  (define (iter list subsequent)
    (cond ((not (null? list))
           (if subsequent (display ", "))
           (display (car list))
           (iter (cdr list) true))))
  (void (iter (car queue) false))
  (newline))

(display "
Ben's experience with a pretty print:
")
(void (define q3 (make-queue)))
(pretty-print-queue (insert-queue! q3 'a))
(pretty-print-queue (insert-queue! q3 'b))
(pretty-print-queue (insert-queue! q3 'c))
(pretty-print-queue (delete-queue! q3))
(pretty-print-queue (delete-queue! q3))
(pretty-print-queue (delete-queue! q3))
