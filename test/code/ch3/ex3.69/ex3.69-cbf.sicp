(%ex "3.69")

; exercise 3.69, p342

(define (interleave s1 s2)
  (if (stream-null? s1)
      s2
      (cons-stream (stream-car s1)
                   (interleave s2 (stream-cdr s1))))) 

(define (pairs s t)
  (cons-stream
   (list (stream-car s) (stream-car t))
   (interleave
    (stream-map (lambda (x) (list (stream-car s) x))
                (stream-cdr t))
    (pairs (stream-cdr s) (stream-cdr t)))))

;; triples

(define (triples r s t)
  (cons-stream
   (list (stream-car r) (stream-car s) (stream-car t))
   (interleave
    (stream-map (lambda (x) (cons (stream-car s) x))
                (stream-cdr (pairs s t)))
    (triples (stream-cdr r) (stream-cdr s) (stream-cdr t)))))

(define (pythagorean? list)
  (let ((i (car list))
        (j (cadr list))
        (k (caddr list)))    
  (= (* k k)
     (+ (* i i)
        (* j j)))))

(define pythagoreans
  (stream-filter pythagorean?
                 (triples integers integers integers)))

(display-stream (take pythagoreans 1))
