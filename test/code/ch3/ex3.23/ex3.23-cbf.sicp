(%ex "3.23")

; exercise 3.23, page 266


(define (set-cdar! pair value)
  (set-cdr! (car pair) value))

(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (set-front-ptr! queue item) (set-car! queue item))
(define (set-rear-ptr! queue item) (set-cdr! queue item))

(define (empty-dequeue? queue) (null? (front-ptr queue)))

(define (make-dequeue) (cons '() '()))

(define (front-dequeue queue)
  (if (empty-dequeue? queue)
      (error "FRONT called with an empty queue" queue)
      (caar (front-ptr queue))))

(define (rear-dequeue queue)
  (if (empty-dequeue? queue)
      (error "REAR called with an empty queue" queue)
      (caar (rear-ptr queue))))

(define (rear-insert-dequeue! queue item)
  (let ((new-pair (cons (cons item '()) '())))
    (cond ((empty-dequeue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else
           (set-cdr! (rear-ptr queue) new-pair)
           (set-cdar! new-pair (rear-ptr queue))
           (set-rear-ptr! queue new-pair)
           queue))))

(define (front-insert-dequeue! queue item)
  (let ((new-pair (cons (cons item '()) '())))
    (cond ((empty-dequeue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else
           (set-cdr! new-pair (front-ptr queue))
           (set-cdar! (front-ptr queue) new-pair)
           (set-front-ptr! queue new-pair)
           queue))))


(define (front-delete-dequeue! queue)
  (cond ((empty-dequeue? queue)
         (error "FRONT DELETE! called with an empty queue" queue))
        (else
         (set-front-ptr! queue (cdr (front-ptr queue)))
         (if (not (empty-dequeue? queue))
             (set-cdar! (front-ptr queue) '()))
         queue)))

(define (rear-delete-dequeue! queue)
  (cond ((empty-dequeue? queue)
         (error "REAR DELETE! called with an empty queue" queue))
        (else
         (cond
           ((pair? (cdar (rear-ptr queue)))
            (set-rear-ptr! queue (cdar (rear-ptr queue)))
            (set-cdr! (rear-ptr queue) '()))
           (else (front-delete-dequeue! queue)))
         queue)))

(define (print-queue queue)
  (display "Queue:")
  (define (iter list subsequent)
    (cond ((not (null? list))
           (if subsequent (display ", "))
           (display (caar list))
           (iter (cdr list) true))))
  (void (iter (car queue) false))
  (newline))

(define (desc q)
  (print-queue q)
  (cond ((empty-dequeue? q)
         (display "->|<-")
         (newline))
        (else
         (display (front-dequeue q))
         (display " <- front | rear -> ")
         (display (rear-dequeue q))
         (newline)
         (newline))))


(display "Ben's experience from Ex 3.21:
")
(define q2 (make-dequeue))
(desc (rear-insert-dequeue! q2 'a))
(desc (front-insert-dequeue! q2 '1))
(desc (rear-insert-dequeue! q2 'b))
(desc (front-insert-dequeue! q2 '2))
(desc (rear-insert-dequeue! q2 'c))
(desc (front-insert-dequeue! q2 '3))
(desc (front-delete-dequeue! q2))
(desc (rear-delete-dequeue! q2))
(desc (front-delete-dequeue! q2))
(desc (rear-delete-dequeue! q2))
(desc (front-delete-dequeue! q2))
(desc (rear-delete-dequeue! q2))
