(%ex "3.25")

; exercise 3.25, page 272

(define (make-table)
  (let ((local-table (list '*table*)))
    (define (lookup table keys)
      (if (null? keys)
          (error "Was given NULL keys"))
      (let ((entry (assoc (car keys) (cdr table))) 
            (next-keys (cdr keys)))
        (if  entry
             ; if next-keys is empty then at a 'leaf'
             ;   otherwise we have a subtable
             (if (null? next-keys)
                 (cdr entry)
                 (lookup entry next-keys))
             false)))
    (define (insert! table keys value)
      (if (null? keys)
          (error "Was given NULL keys"))          
      (let ((entry (assoc (car keys) (cdr table)))
            (key (car keys))
            (next-keys (cdr keys)))
        (if (null? next-keys)
            ; at 'leaf'
            (if entry
                (set-cdr! entry value)
                (set-cdr! table
                          (cons (cons key value)
                                 (cdr table))))
            ;handle a subltable
            (if entry 
                (insert! entry next-keys value)
                (begin
                  (set-cdr! table
                            (cons (list key)
                                  (cdr table)))
                  (insert! (cadr table) next-keys value)))))
      'ok)
         
    (define (dispatch m)
      (cond ((eq? m 'lookup)
             (lambda (keys) (lookup local-table keys)))
            ((eq? m 'insert!)
             (lambda (keys value) (insert! local-table keys value)))
            (else (error "Unknown operation -- TABLE" m))))
    dispatch))



(define table (make-table))

(display "
Adding 'apple and 'ant under single key."
)  
(void (define key1a '('a)))
(void (define key1b '(1)))
(void ((table 'insert!) key1a 'apple))
(void ((table 'insert!) key1b 'ant))


(display "
Adding 'banana and 'bull under double keys."
)  
(void (define key2a '('b 2)))
(void (define key2b '('bb 22)))
(void ((table 'insert!) key2a 'banana))
(void ((table 'insert!) key2b 'bull))


(display "
Adding 'cherry and 'cat under tripple  keys.
")  
(void (define key3a '('c 2 'same)))
(void (define key3b '('c 22 'same)))
(void ((table 'insert!) key3a 'cherry))
(void ((table 'insert!) key3b 'cat))


(display "
Retrieving values:")
(display ((table 'lookup) key1a))(newline)
(display ((table 'lookup) key1b))(newline)
(display ((table 'lookup) key2a))(newline)
(display ((table 'lookup) key2b))(newline)
(display ((table 'lookup) key3a))(newline)
(display ((table 'lookup) key3b))(newline)
